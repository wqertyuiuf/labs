using System;

public class NotCorrectlyDenominatorException : Exception
{
    public NotCorrectlyDenominatorException(string message) : base(message) { }
}
public class Fraction
{
    private int numerator;   // Числитель
    private int denominator; // Знаменатель

    // Конструктор
    public Fraction(int numerator, int denominator)
    {
        if (denominator == 0)
        {
            throw new NotCorrectlyDenominatorException("Знаменатель не может быть равен 0");
        }
        this.numerator = numerator;
        this.denominator = denominator;
        Simplify();
    }
    //доступ к числителю и знаменателю
    public int Numerator
    {
        get { return numerator; }
    }

    public int Denominator
    {
        get { return denominator; }
    }

    //получение десятичной дроби
    public double DecimalValue
    {
        get { return (double)numerator / denominator; }
    }

    //упрощение дроби
    private void Simplify()
    {
        int gcd = GCD(numerator, denominator);
        numerator /= gcd;
        denominator /= gcd;
    }

    //НОД
    private int GCD(int a, int b)
    {
        while (b != 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return Math.Abs(a);
    }

    // Сложение дробей
    public static Fraction operator +(Fraction a, Fraction b)
    {
        int newNumerator = a.numerator * b.denominator + b.numerator * a.denominator;
        int newDenominator = a.denominator * b.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    // Вычитание дробей
    public static Fraction operator -(Fraction a, Fraction b)
    {
        int newNumerator = a.numerator * b.denominator - b.numerator * a.denominator;
        int newDenominator = a.denominator * b.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    // Умножение дробей
    public static Fraction operator *(Fraction a, Fraction b)
    {
        int newNumerator = a.numerator * b.numerator;
        int newDenominator = a.denominator * b.denominator;
        return new Fraction(newNumerator, newDenominator);
    }

    // Деление дробей
    public static Fraction operator /(Fraction a, Fraction b)
    {
        if (b.numerator == 0)
        {
            throw new DivideByZeroException("Деление на ноль");
        }
        
        int newNumerator = a.numerator * b.denominator;
        int newDenominator = a.denominator * b.numerator;
        return new Fraction(newNumerator, newDenominator);
    }
    public override string ToString()
    {
        return $"{numerator}/{denominator}";
    }
}



// Программа для демонстрации работы класса
class Program
{
    static void Main(string[] args)
    {
        try
        {
            Fraction fraction1 = new Fraction(1, 2); // 1/2
            Fraction fraction2 = new Fraction(3, 4); // 3/4

            Console.WriteLine($"Дробь 1: {fraction1}");
            Console.WriteLine($"Дробь 2: {fraction2}");

            Fraction sum = fraction1 + fraction2;
            Console.WriteLine($"Сумма: {sum} (десятичное значение: {sum.DecimalValue})");

            Fraction difference = fraction1 - fraction2;
            Console.WriteLine($"Разность: {difference} (десятичное значение: {difference.DecimalValue})");

            Fraction product = fraction1 * fraction2;
            Console.WriteLine($"Произведение: {product} (десятичное значение: {product.DecimalValue})");

            Fraction quotient = fraction1 / fraction2;
            Console.WriteLine($"Частное: {quotient} (десятичное значение: {quotient.DecimalValue})");

            try
            {
                Fraction invalidFraction = new Fraction(1, 0); // Это вызовет исключение
            }
            catch (NotCorrectlyDenominatorException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
        
        Console.ReadLine();
    }
}

